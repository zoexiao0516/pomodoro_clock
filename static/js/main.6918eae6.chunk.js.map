{"version":3,"sources":["component/SessionLength.js","component/Timer.js","theme/GlobalStyles.js","utils/storage.js","theme/useTheme.js","component/App.js","ThemeSelector.js","component/Theming.js","reportWebVitals.js","index.js"],"names":["SessionLength","props","sessionName","className","style","backgroundColor","buttonColor","disabled","isPlay","onClick","sessionLength","decreaseSession","increaseSession","Timer","state","isSession","timerSecond","intervalId","playTimer","bind","decreaseTimer","stopTimer","resetTimer","setInterval","this","onPlayStopTimer","setState","timerMinute","toggleInterval","decreaseTimerMinute","prevState","clearInterval","React","Component","GlobalStyles","createGlobalStyle","theme","colors","body","text","font","link","button","background","setToLS","key","value","window","localStorage","setItem","JSON","stringify","getFromLS","getItem","parse","useTheme","themes","useState","data","light","setTheme","themeLoaded","setThemeLoaded","useEffect","localTheme","seaWave","setMode","mode","getFonts","_","values","mapValues","App","breakLength","onIncreaseBreakLength","onDecreaseBreakLength","onIncreaseSessionLength","onDecreaseSessionLength","onDecreaseTimerMinute","onToggleInterval","onResetTimer","to","ThemeChanger","selectedTheme","setSelectedTheme","WebFont","load","google","families","ThemedButton","styled","Wrapper","li","Container","ul","Header","h2","themesFromStore","setData","setThemes","themeSwitcher","console","log","setter","keys","newTheme","updateThemeCard","updated","ThemeCard","camelCase","name","color","fontFamily","length","map","id","div","ThemeSelector","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Index","exact","path","component","Theming","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6918eae6.chunk.js","sourcesContent":["import React from 'react';\n\nfunction SessionLength(props) {\n    function decreaseSession() {\n        if (props.sessionLength === 1) {\n            return;\n        }\n\n        props.decreaseSession();\n    }\n\n    function increaseSession() {\n        if (props.sessionLength === 60) {\n            return;\n        }\n\n        props.increaseSession();\n    }\n\n    return (\n        <section>\n            <h4>Set Your {props.sessionName} Length</h4>\n            <section className=\"interval-container-inner\">\n                <button style={{backgroundColor: props.buttonColor}} disabled={props.isPlay === true ? \"disabled\" : \"\"} onClick={decreaseSession}>Down</button>\n                <p className=\"interval-length\">{props.sessionLength}</p>\n                <button style={{backgroundColor: props.buttonColor}} disabled={props.isPlay === true ? \"disabled\" : \"\"} onClick={increaseSession}>Up</button>\n            </section>\n        </section>\n    )\n}\n\nexport default SessionLength;","import React from 'react';\n\n// Timer is going to be a class component b/c we need to keep state of \n// whether the timer is playing or if it's stopped\nclass Timer extends React.Component {\n    constructor() {\n        super();\n        \n        this.state = {\n          isSession: true,\n          timerSecond: 0,\n          intervalId: 0\n        };\n\n        this.playTimer = this.playTimer.bind(this);\n        this.decreaseTimer = this.decreaseTimer.bind(this);\n        this.stopTimer = this.stopTimer.bind(this);\n        this.resetTimer = this.resetTimer.bind(this);\n      }\n\n    playTimer() {\n        let intervalId = setInterval(this.decreaseTimer, 1000);  // update every second\n        this.props.onPlayStopTimer(true)\n        this.setState({\n            intervalId: intervalId\n        })\n    }\n\n    decreaseTimer() {\n        switch (this.state.timerSecond) {\n            case 0:\n                if (this.props.timerMinute === 0) {\n                    this.setState({\n                        isSession: !this.state.isSession\n                    });\n                    this.props.toggleInterval(this.state.isSession)\n\n                    // if (this.state.isSession) {\n                    //     this.setState({\n                    //         isSession: false\n                    //     });\n                    //     this.props.toggleInterval(this.state.isSession)\n                    // } else{\n                    //     this.setState({\n                    //         isSession: true\n                    //     });\n                    //     this.props.toggleInterval(this.state.isSession)\n                    // }\n                } else{\n                    this.props.decreaseTimerMinute()\n                    this.setState({\n                        timerSecond: 59\n                    })\n                }\n                break;\n            default:\n                this.setState((prevState) => {\n                    return {\n                        timerSecond: prevState.timerSecond - 1\n                    }\n                })\n                break;\n        }\n    }\n\n    stopTimer() {\n        clearInterval(this.state.intervalId);\n        this.props.onPlayStopTimer(false)\n    }\n\n    resetTimer() {\n        this.stopTimer();\n        this.props.resetTimer();\n        this.props.onPlayStopTimer(false);\n        this.setState({\n            timerSecond: 0,\n            isSession: true\n        })\n    }\n      \n    render() {\n    return(\n        <section>\n            <section className=\"timer-container\">\n                <h4>{this.state.isSession === true ? \"In a Session\" : \"On a Break\"}</h4>\n                <span className=\"timer\">{this.props.timerMinute}</span>\n                <span className=\"timer\">:</span>\n                <span className=\"timer\">{this.state.timerSecond === 0 \n                ? \"00\" \n                : this.state.timerSecond < 10 \n                ? \"0\" + this.state.timerSecond :\n                this.state.timerSecond}</span>\n            </section>\n            <section className=\"timer-action\">\n            <button onClick={this.playTimer} style={{backgroundColor: this.props.buttonColor}}>Play</button>\n            <button onClick={this.stopTimer} style={{backgroundColor: this.props.buttonColor}}>Stop</button>\n            <button onClick={this.resetTimer} style={{backgroundColor: this.props.buttonColor}}>Reset</button>\n            </section>\n        </section>\n    );\n    }\n}\n\nexport default Timer;","import { createGlobalStyle} from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    background: ${({ theme }) => theme.colors.body};\n    color: ${({ theme }) => theme.colors.text};\n    font-family: ${({ theme }) => theme.font};\n    transition: all 0.50s linear;\n  }\n\n  main {\n    font-family: ${({ theme }) => theme.font};\n  }\n\n  a {\n    color: ${({ theme }) => theme.colors.link.text};\n    cursor: pointer;\n  }\n\n  button {\n    border: 0;\n    display: inline-block;\n    ${'' /* padding: 12px 24px; */}\n    padding: 5px 10px;\n    font-size: 14px;\n    border-radius: 4px;\n    ${'' /* margin-top: 5px; */}\n    margin: 0 10px;\n    cursor: pointer;\n    ${'' /* background-color: #1064EA; */}\n    background-color: ${({ theme }) => theme.colors.button.background};\n    ${'' /* color: #FFFFFF; */}\n    color: ${({ theme }) => theme.colors.button.text};\n    font-family: ${({ theme }) => theme.font};\n  }\n\n  button.btn {\n    background-color: ${({ theme }) => theme.colors.button.background};\n    color: ${({ theme }) => theme.colors.button.text};\n  }\n`;","// store it in the browser’s localStorage.\nexport const setToLS = (key, value) => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n}\n  \nexport const getFromLS = key => {\n    const value = window.localStorage.getItem(key);\n\n    if (value) {\n        return JSON.parse(value);\n    }\n}\n","import { useEffect, useState } from 'react';\nimport { setToLS, getFromLS } from '../utils/storage';\nimport _ from 'lodash';\n\nexport const useTheme = () => {\n  const themes = getFromLS('all-themes');\n  // This custom React hook returns the selected theme from localStorage and \n  // a boolean to indicate if the theme is loaded correctly from storage.\n  const [theme, setTheme] = useState(themes.data.light);\n  const [themeLoaded, setThemeLoaded] = useState(false);\n\n  const setMode = mode => {\n    setToLS('theme', mode)\n    setTheme(mode);\n  };\n\n  const getFonts = () => {\n    const allFonts = _.values(_.mapValues(themes.data, 'font'));\n    return allFonts;\n  }\n\n  useEffect(() =>{\n    const localTheme = getFromLS('theme');\n    // localTheme ? setTheme(localTheme) : setTheme(themes.data.light);\n    localTheme ? setTheme(localTheme) : setTheme(themes.data.seaWave);\n    setThemeLoaded(true);\n  }, []);\n\n  return { theme, themeLoaded, setMode, getFonts };\n};","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport './App.css';\nimport SessionLength from './SessionLength';\nimport Timer from './Timer';\nimport { ThemeProvider } from \"styled-components\";\nimport WebFont from 'webfontloader';\nimport { GlobalStyles } from '../theme/GlobalStyles.js';\nimport { useTheme } from '../theme/useTheme';\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    // lift the state up and update the states here in the parent component\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      timerMinute: 25,\n      isPlay: false\n      // buttonColor: \"#ff8f69\"\n    }\n\n    // bind functions\n    this.onIncreaseBreakLength = this.onIncreaseBreakLength.bind(this);\n    this.onDecreaseBreakLength = this.onDecreaseBreakLength.bind(this);\n    this.onIncreaseSessionLength = this.onIncreaseSessionLength.bind(this);\n    this.onDecreaseSessionLength = this.onDecreaseSessionLength.bind(this);\n    this.onDecreaseTimerMinute = this.onDecreaseTimerMinute.bind(this);\n    this.onToggleInterval = this.onToggleInterval.bind(this);\n    this.onResetTimer = this.onResetTimer.bind(this);\n    this.onPlayStopTimer = this.onPlayStopTimer.bind(this)\n  }\n\n  onIncreaseBreakLength() {\n    this.setState((prevState) => {\n      return {\n        breakLength: prevState.breakLength + 1\n      }\n    })\n  }\n\n  onDecreaseBreakLength() {\n    this.setState((prevState) => {\n      return {\n        breakLength: prevState.breakLength - 1\n      }\n    })\n  }\n\n  onIncreaseSessionLength() {\n    this.setState((prevState) => {\n      return {\n        sessionLength: prevState.sessionLength + 1,\n        timerMinute: prevState.timerMinute + 1\n      }\n    })\n  }\n\n  onDecreaseSessionLength() {\n    this.setState((prevState) => {\n      return {\n        sessionLength: prevState.sessionLength - 1,\n        timerMinute: prevState.timerMinute - 1\n      }\n    })\n  }\n\n  onDecreaseTimerMinute() {\n    this.setState((prevState) => {\n      return {\n        timerMinute: prevState.timerMinute - 1\n      }\n    })\n  }\n\n  onToggleInterval(isSession) {\n    if (isSession) {\n      this.setState({\n        timerMinute: this.state.sessionLength\n      })\n    } else {\n      this.setState({\n        timerMinute: this.state.breakLength\n      })\n    }\n  }\n\n  onResetTimer() {\n    this.setState({\n      timerMinute: this.state.sessionLength\n    })\n  }\n\n  onPlayStopTimer(isPlay) {\n    this.setState({\n      isPlay: isPlay\n    })\n  }\n\n\n  render() {\n    return(\n      <main>\n        <h2>Pomodoro Clock</h2>\n        \n        <div className=\"setting-link\">\n        <Link to='/theming'>Theming</Link></div>\n        \n        <section className='interval-container-outer'>\n          <SessionLength sessionLength={this.state.breakLength}\n            increaseSession={this.onIncreaseBreakLength}\n            decreaseSession={this.onDecreaseBreakLength}\n            isPlay={this.state.isPlay}\n            sessionName='Break'\n            />\n          \n          <SessionLength sessionLength={this.state.sessionLength}\n            increaseSession={this.onIncreaseSessionLength}\n            decreaseSession={this.onDecreaseSessionLength}\n            isPlay={this.state.isPlay}\n            sessionName='Session'\n            />\n        </section>\n        \n        <Timer timerMinute={this.state.timerMinute}\n          breakLength={this.state.breakLength}\n          decreaseTimerMinute={this.onDecreaseTimerMinute}\n          toggleInterval={this.onToggleInterval}\n          resetTimer={this.onResetTimer}\n          onPlayStopTimer={this.onPlayStopTimer}\n          // buttonColor={this.state.buttonColor}\n          />\n      \n      </main>\n    );\n  }\n}\n\n// export default App;\n\nfunction ThemeChanger() {\n  // 3: Get the selected theme, font list, etc.\n  const {theme, themeLoaded, getFonts} = useTheme();\n  const [selectedTheme, setSelectedTheme] = useState(theme);\n\n  useEffect(() => {\n    setSelectedTheme(theme);\n   }, [themeLoaded]);\n\n  // 4: Load all the fonts\n  useEffect(() => {\n    WebFont.load({\n      google: {\n        families: getFonts()\n      }\n    });\n  });\n\n  // 5: Render if the theme is loaded.\n  return (\n    <>\n    {\n      themeLoaded && <ThemeProvider theme={ selectedTheme }>\n        <GlobalStyles/>\n        <App />\n      </ThemeProvider>\n    }\n    </>\n  );\n}\n\nexport default ThemeChanger;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport _ from 'lodash';\nimport {useTheme} from './theme/useTheme';\nimport { getFromLS } from './utils/storage';\n\nconst ThemedButton = styled.button`\n    border: 0;\n    display: inline-block;\n    ${'' /* padding: 12px 24px; */}\n    padding: 5px 10px;\n    font-size: 14px;\n    border-radius: 4px;\n    ${'' /* margin-top: 5px; */}\n    margin: 0 10px;\n    width: 70%;\n`;\n\nconst Wrapper = styled.li`\n    padding: 48px;\n    text-align: center;\n    border-radius: 4px;\n    border: 1px solid #000;\n    list-style: none;\n`;\n\nconst Container = styled.ul`\n    display: grid;\n    gap: 1rem;\n    grid-template-columns: repeat(4, 1fr);\n    margin-top: 3rem;\n    padding: 10px;\n`;\n\nconst Header = styled.h2`\n    display: flex;\n    justify-content: space-around;\n`;\n\nexport default (props) => {\n    const themesFromStore = getFromLS('all-themes');\n    const [data, setData] = useState(themesFromStore.data);\n    const [themes, setThemes] = useState([]);\n    const {setMode} = useTheme();\n\n    const themeSwitcher = selectedTheme => {\n        console.log(selectedTheme);\n        setMode(selectedTheme);\n        props.setter(selectedTheme);\n    };\n\n    useEffect(() => {\n        setThemes(_.keys(data));\n    }, [data]);\n\n    useEffect(() => {\n        props.newTheme &&\n            updateThemeCard(props.newTheme);\n    }, [props.newTheme])\n\n    const updateThemeCard = theme => {\n        const key = _.keys(theme)[0];\n        const updated = {...data, [key]:theme[key]};\n        setData(updated);\n    }\n\n    const ThemeCard = props => {\n        return(\n            <Wrapper style={{backgroundColor: `${data[_.camelCase(props.theme.name)].colors.body}`, \n                    color: `${data[_.camelCase(props.theme.name)].colors.text}`, \n                    fontFamily: `${data[_.camelCase(props.theme.name)].font}`}}>\n                    <span>Click on the button to set this theme</span>\n                <ThemedButton onClick={ (theme) => themeSwitcher(props.theme) }\n                    style={{backgroundColor: `${data[_.camelCase(props.theme.name)].colors.button.background}`, \n                    color: `${data[_.camelCase(props.theme.name)].colors.button.text}`,\n                    fontFamily: `${data[_.camelCase(props.theme.name)].font}`}}>\n                    {props.theme.name}\n                </ThemedButton>\n            </Wrapper>\n        )\n    }\n\n    return (\n        <div>\n            <Header>Select a Theme from below</Header>\n            <Container>\n            {/* We’ll go over all the themes, loop through them, and populate each one as a ThemeCard component. */}\n            {\n                themes.length > 0 && \n                    themes.map(theme =>(\n                        <ThemeCard theme={data[theme]} key={data[theme].id} />\n                    ))\n            }\n            </Container>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport './Theming.css';\nimport styled, { ThemeProvider } from \"styled-components\";\nimport WebFont from 'webfontloader';\nimport { GlobalStyles } from '../theme/GlobalStyles.js';\nimport { useTheme } from '../theme/useTheme';\nimport ThemeSelector from '../ThemeSelector';\n\n\n// class ThemeChanger extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             value: 'orange',\n//             hexCode: \"#ff8f69\"\n//         };\n\n//         this.handleChange = this.handleChange.bind(this);\n//         this.handleSubmit = this.handleSubmit.bind(this);\n//     }\n\n//     handleChange(event) {\n//         this.setState({ value: event.target.value });\n//     }\n\n//     handleSubmit(event) {\n//         this.setState(() => {\n//             return {\n//                 hexCode: this.getHexCode[this.state.value]\n//             }\n//         })\n//         // alert('You selected color: ' + this.state.value + \" and hexcode: \" + this.getHexCode[this.state.value]);\n//         event.preventDefault();\n//     }\n\n//     getHexCode = {\n//         violet: \"#7852A9\",\n//         yellow: \"#FCF3A6\",\n//         orange: \"#ff8f69\",\n//         magenta: \"#FF5CFF\"\n//     }\n\n//     ThemeContext = React.createContext(\n//         this.getHexCode.orange // default value\n//     );\n\n//     render() {\n//         return (\n//             <main>\n//                 <h4>Adjust the color theme</h4>\n\n//                 <div className=\"home-link\"><Link buttonColor={this.state.hexCode} to='/'>Go home</Link></div>\n\n//                 <form onSubmit={this.handleSubmit}>\n\n//                     <select value={this.state.value} onChange={this.handleChange}>\n//                         <option value=\"violet\">Violet</option>\n//                         <option value=\"yellow\">Yellow</option>\n//                         <option value=\"orange\">Orange</option>\n//                         <option value=\"magenta\">Magenta</option>\n//                     </select>\n\n//                     <input type=\"submit\" value=\"Select\" />\n//                 </form>\n\n//             </main>\n//         );\n//     }\n// }\n\n// export default ThemeChanger;\n\n// 2: Create a cotainer\nconst Container = styled.div`\n  margin: 5px auto 5px auto;\n`;\n\nfunction ThemeChanger() {\n  // 3: Get the selected theme, font list, etc.\n  const {theme, themeLoaded, getFonts} = useTheme();\n  const [selectedTheme, setSelectedTheme] = useState(theme);\n\n  useEffect(() => {\n    setSelectedTheme(theme);\n   }, [themeLoaded]);\n\n  // 4: Load all the fonts\n  useEffect(() => {\n    WebFont.load({\n      google: {\n        families: getFonts()\n      }\n    });\n  });\n\n  // 5: Render if the theme is loaded.\n  return (\n    <>\n    {\n      themeLoaded && <ThemeProvider theme={ selectedTheme }>\n        <GlobalStyles/>\n        <Container style={{fontFamily: selectedTheme.font}}>\n          <div className=\"home-link\"><Link to='/'>Go home</Link></div>\n          <ThemeSelector setter={ setSelectedTheme } />\n        </Container>\n      </ThemeProvider>\n    }\n    </>\n  );\n}\n\nexport default ThemeChanger;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './index.css';\nimport App from './component/App';\nimport Theming from './component/Theming';\nimport reportWebVitals from './reportWebVitals';\nimport * as themes from './theme/schema.json';\nimport { setToLS } from './utils/storage';\n\nconst Index = () => {\n  setToLS('all-themes', themes.default);\n  return(\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={App}/>\n        <Route path=\"/theming\" component={Theming}/>\n      </div>\n    </Router>\n  )\n}\n\nReactDOM.render(\n  <Index />,\n  document.getElementById('root')\n);\n\n// ReactDOM.render(\n//   <Router>\n//     <div>\n//       <Route exact path=\"/\" component={App}/>\n//       <Route path=\"/setting\" component={Setting}/>\n//     </div>\n//   </Router>,\n//   document.getElementById('root')\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}